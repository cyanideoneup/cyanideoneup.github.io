/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ArcaneObfuscatePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/arcane.ts
function getToken(text, start, end) {
  if (end - start == 0) {
    return { type: 0 /* NONE */, value: "" };
  }
  const partial = text.substring(start, end);
  if (/(\\.?)+$/.test(partial) || /^!(\S)*$/.test(partial)) {
    let answer = partial;
    answer = answer.replace(/\\(.)?/g, "$1");
    answer = answer.replace(/^!/, "");
    return {
      type: 2 /* LITERAL_TEXT */,
      value: answer
    };
  }
  if (/(\s)+$/.test(partial)) {
    return {
      type: 3 /* WHITESPACE */,
      value: partial
    };
  }
  return {
    type: 1 /* LENGTH */,
    value: partial.length
  };
}
function getNextToken(text, index) {
  let lastToken = { type: 0 /* NONE */, value: "" };
  let end = index + 1;
  do {
    let currentToken = getToken(text, index, end);
    if ((lastToken == null ? void 0 : lastToken.type) != 0 /* NONE */ && currentToken.type != (lastToken == null ? void 0 : lastToken.type) || end > text.length) {
      return {
        token: lastToken,
        consumed: end - 1 - index
      };
    }
    lastToken = currentToken;
    end++;
  } while (true);
}
function getAllTokens(text) {
  const result = [];
  let index = 0;
  do {
    const { token, consumed } = getNextToken(text, index);
    if (token.type != 0 /* NONE */) {
      result.push(token);
    }
    index += consumed;
  } while (index < text.length);
  return result;
}
function parseWords(text) {
  const tokens = getAllTokens(text);
  const words = [];
  let index = 0;
  let currentWord = [];
  do {
    let currentToken = tokens[index];
    if (currentToken.type == 3 /* WHITESPACE */) {
      if (currentWord.length != 0) {
        words.push(currentWord);
        currentWord = [];
      }
      words.push([currentToken]);
    } else {
      currentWord.push(currentToken);
    }
    index++;
  } while (index < tokens.length);
  if (currentWord.length != 0) {
    words.push(currentWord);
  }
  return words;
}

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  characterSet: "\u16A0\u16A2\u16A6\u16A8\u16B1\u16B2\u16B7\u16B9\u16BA\u16BE\u16C1\u16C3\u16C7\u16C8\u16C9\u16CB\u16CF\u16D2\u16D6\u16D7\u16DA\u16DD\u16DF\u16DE\u16E1\u16E0",
  characterChangeRate: 0.3,
  updateRateMs: 300
};
async function loadSettings(plugin) {
  return Object.assign({}, DEFAULT_SETTINGS, await plugin.loadData());
}
async function saveSettings(plugin) {
  await plugin.saveData(plugin.settings);
}
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.lastNotice = 0;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const save = async (alert, refresh) => {
      await saveSettings(this.plugin);
      if (alert && Date.now() - this.lastNotice > 5e3) {
        this.lastNotice = Date.now();
        new import_obsidian.Notice(
          "Please restart Obsidian for the changes to take effect.",
          5e3
        );
      }
      if (refresh) {
        this.display();
      }
    };
    new import_obsidian.Setting(containerEl).setName("Character set").setDesc(
      "The set of characters that will be used in the final visual"
    ).addText(
      (text) => text.setPlaceholder("\u16A0\u16A2\u16A6\u16A8\u16B1\u16B2\u16B7\u16B9\u16BA\u16BE\u16C1\u16C3\u16C7\u16C8\u16C9\u16CB\u16CF\u16D2\u16D6\u16D7\u16DA\u16DD\u16DF\u16DE\u16E1\u16E0").setValue(this.plugin.settings.characterSet).onChange(async (value) => {
        this.plugin.settings.characterSet = value;
        await save(true, false);
      })
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Reset").onClick(async () => {
        this.plugin.settings.characterSet = DEFAULT_SETTINGS.characterSet;
        await save(true, true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Character change rate").setDesc(
      "The averaged rate that the characters will change. Set to 0 to disable. Set to 100 to always change every character every time."
    ).addSlider(
      (slider) => slider.setLimits(0, 100, 1).setValue(this.plugin.settings.characterChangeRate * 100).onChange(async (value) => {
        this.plugin.settings.characterChangeRate = value / 100;
        await save(true, false);
      }).setDynamicTooltip()
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Reset").onClick(async () => {
        this.plugin.settings.characterChangeRate = DEFAULT_SETTINGS.characterChangeRate;
        await save(true, true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Character update rate milliseconds").setDesc("How often (in milliseconds) that the text will change").addSlider(
      (slider) => slider.setLimits(0, 5e3, 1).setValue(this.plugin.settings.updateRateMs).onChange(async (value) => {
        this.plugin.settings.updateRateMs = value;
        await save(true, false);
      }).setDynamicTooltip()
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Reset").onClick(async () => {
        this.plugin.settings.updateRateMs = DEFAULT_SETTINGS.updateRateMs;
        await save(true, true);
      })
    );
  }
};

// src/script.ts
var scriptComponent = (characterSet, characterChangeRate, updateRateMs) => {
  function getRandomCharacter(not) {
    let candidates = characterSet.replace(not != null ? not : "", "");
    return candidates[Math.floor(Math.random() * candidates.length)];
  }
  const me = document.currentScript;
  const parent = me.parentElement;
  const htmlArcaneCharacters = [];
  const myIndex = Array.from(parent.childNodes).indexOf(me);
  for (let i = myIndex - 1; i >= 0; i--) {
    if (parent.childNodes[i].nodeType === Node.ELEMENT_NODE) {
      const element = parent.childNodes[i];
      if (element.classList.contains("arcane-word")) {
        for (let j = 0; j < element.children.length; j++) {
          htmlArcaneCharacters.push({
            el: element.children[j],
            count: 0
          });
        }
      }
      if (element.classList.contains("arcane-script")) {
        break;
      }
    }
  }
  const length = htmlArcaneCharacters.length;
  htmlArcaneCharacters.shuffle = function() {
    for (let i = this.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this[i], this[j]] = [this[j], this[i]];
    }
    return this;
  };
  const intervalId = setInterval(() => {
    if (!document.body.contains(me)) {
      clearInterval(intervalId);
      return;
    }
    if (length === 0) {
      clearInterval(intervalId);
      return;
    }
    const chars = length * characterChangeRate;
    htmlArcaneCharacters.shuffle().sort((first, second) => {
      return first.count - second.count + Math.floor((Math.random() * 2 - 1) * 3);
    }).slice(
      0,
      Math.random() < 1 - (chars - Math.floor(chars)) ? Math.floor(chars) : Math.ceil(chars)
    ).forEach((sibling) => {
      sibling.el.innerText = getRandomCharacter(sibling.el.innerText);
      sibling.count++;
    });
  }, updateRateMs);
};
function createScriptNode(script) {
  const scriptElement = document.createElement("script");
  scriptElement.className = "arcane-script";
  scriptElement.textContent = script;
  return scriptElement;
}

// src/main.ts
var ArcaneObfuscatePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.settings = await loadSettings(this);
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on(
        "active-leaf-change",
        this.handleActiveLeafChange.bind(this)
      )
    );
    this.registerMarkdownPostProcessor((element, context) => {
      element.querySelectorAll("code").forEach((codeElement) => {
        const match = codeElement.innerText.match(/~(.+)~/);
        if (match) {
          const text = match[1];
          this.processArcaneContainer(codeElement, text);
        }
      });
    });
  }
  processArcaneContainer(container, text) {
    const script = createScriptNode(
      `(${scriptComponent.toString()})('${this.settings.characterSet}', ${this.settings.characterChangeRate}, ${this.settings.updateRateMs})`
    );
    const words = parseWords(text);
    const elements = [];
    words.forEach((word) => {
      const arcaneWord = document.createElement("span");
      arcaneWord.className = "arcane-word";
      word.forEach((token) => {
        switch (token.type) {
          case 1 /* LENGTH */:
            let num = token.value;
            for (let i = 0; i < num; i++) {
              const characterDiv = document.createElement("span");
              characterDiv.className = "arcane-character";
              characterDiv.textContent = this.settings.characterSet.charAt(
                Math.floor(
                  Math.random() * this.settings.characterSet.length
                )
              );
              arcaneWord.appendChild(characterDiv);
            }
            break;
          case 2 /* LITERAL_TEXT */:
          case 3 /* WHITESPACE */:
            const textNode = document.createTextNode(
              token.value
            );
            arcaneWord.appendChild(textNode);
            break;
        }
      });
      elements.push(arcaneWord);
    });
    elements.push(script);
    if (elements.length <= 1)
      return;
    let previousElement = elements.shift();
    container.parentElement.replaceChild(previousElement, container);
    while (elements.length != 0) {
      let currentElement = elements.shift();
      previousElement.parentElement.insertAfter(
        currentElement,
        previousElement
      );
      previousElement = currentElement;
    }
  }
  handleActiveLeafChange(leaf) {
    var _a;
    if ((_a = leaf == null ? void 0 : leaf.view) == null ? void 0 : _a.containerEl) {
      const container = leaf.view.containerEl;
      setTimeout(() => {
        const arcaneScripts = container.querySelectorAll(".arcane-script");
        arcaneScripts.forEach((originalScript) => {
          const replacementScript = createScriptNode(
            originalScript.textContent
          );
          originalScript.parentElement.replaceChild(
            replacementScript,
            originalScript
          );
        });
      }, 10);
    }
  }
};
